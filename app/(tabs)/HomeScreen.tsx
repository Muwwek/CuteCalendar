// app/(tabs)/HomeScreen.tsx
import { Text, View, TouchableOpacity, Alert } from "react-native";
import { useRouter, useLocalSearchParams } from "expo-router";
import { useEffect, useState } from "react";
import { Ionicons } from "@expo/vector-icons";
import { styles } from "./HomeScreenStyles";

export default function HomeScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å params ‡∏Å‡πà‡∏≠‡∏ô
  const { email, username: paramsUsername, user_id } = params;

  const [userEmail, setUserEmail] = useState<string>("");
  const [username, setUsername] = useState<string>("");
  const [userId, setUserId] = useState<number>(0);

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useEffect
  useEffect(() => {
    console.log("HomeScreen params:", params);

    if (email && paramsUsername && user_id) {
      setUserEmail(email as string);
      setUsername(paramsUsername as string);
      setUserId(Number(user_id));
      console.log("‚úÖ User data loaded:", {
        username: paramsUsername,
        email: email,
        user_id: user_id,
      });
    } else {
      // fallback ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà login
      setUserEmail("guest@example.com");
      setUsername("Guest");
      setUserId(0);
      console.log("‚ö†Ô∏è Using guest mode");
    }
  }, [email, paramsUsername, user_id]); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô dependency array ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ primitive

  const handleLogout = () => {
    router.replace("/login");
  };

  const handleSetupWork = () => {
    if (userId === 0) {
      Alert.alert("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      return;
    }

    router.push({
      pathname: "/MainWork",
      params: {
        user_id: userId.toString(),
        username: username,
        email: userEmail,
      },
    });
  };

  const handleGoToSettings = () => {
    if (userId === 0) {
      Alert.alert("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      return;
    }

    router.push({
      pathname: "/settings",
      params: {
        user_id: userId.toString(),
        username: username,
        email: userEmail,
      },
    });
  };

  return (
    <View style={styles.container}>
      {/* ... ‡∏™‡πà‡∏ß‡∏ô UI ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... */}
      <View style={styles.header}>
        <View style={styles.userInfo}>
          <Ionicons name="person-circle" size={50} color="#007AFF" />
          <View style={styles.userText}>
            <Text style={styles.welcomeText}>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {username}!</Text>
            <Text style={styles.emailText}>{userEmail}</Text>
          </View>
        </View>
      </View>

      <View style={styles.content}>
        <Text style={styles.title}>üìå Welcome to SmartPriorityLife</Text>
        <View style={styles.statusCard}>
          <Text style={styles.statusTitle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Text>
          {userId !== 0 ? (
            <>
              <View style={styles.statusItem}>
                <Ionicons name="checkmark-circle" size={20} color="#10B981" />
                <Text style={styles.statusText}>‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</Text>
              </View>
              <View style={styles.statusItem}>
                <Ionicons name="person" size={20} color="#8B5CF6" />
                <Text style={styles.statusText}>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {username}</Text>
              </View>
              <View style={styles.statusItem}>
                <Ionicons name="mail" size={20} color="#3B82F6" />
                <Text style={styles.statusText}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {userEmail}</Text>
              </View>
              
              <View style={styles.statusItem}>
                <Ionicons name="time" size={20} color="#EF4444" />
                <Text style={styles.statusText}>
                  ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date().toLocaleTimeString("th-TH")}
                </Text>
              </View>
            </>
          ) : (
            <View style={styles.statusItem}>
              <Ionicons name="alert-circle" size={20} color="#EF4444" />
              <Text style={styles.statusText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</Text>
            </View>
          )}
        </View>
      </View>

      <View style={styles.buttonContainer}>
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å */}
        <TouchableOpacity
          style={[styles.button, styles.setupButton]}
          onPress={handleSetupWork}
        >
          <Ionicons name="construct-outline" size={20} color="#FFFFFF" />
          <Text style={styles.buttonText}>Calendar</Text>
        </TouchableOpacity>

        {/* ‡∏õ‡∏∏‡πà‡∏° shortcut ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Settings */}
        <TouchableOpacity
          style={[styles.button, { backgroundColor: "#6B7280" }]}
          onPress={handleGoToSettings}
        >
          <Ionicons name="settings-outline" size={20} color="#FFFFFF" />
          <Text style={styles.buttonText}>‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Settings</Text>
        </TouchableOpacity>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
        <TouchableOpacity
          style={[styles.button, styles.logoutButton]}
          onPress={handleLogout}
        >
          <Ionicons name="log-out-outline" size={20} color="#FFFFFF" />
          <Text style={styles.buttonText}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}