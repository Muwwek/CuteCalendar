// app/(tabs)/settings.tsx
import { useState } from "react";
import { View, Text, Button, TextInput, ScrollView, TouchableOpacity } from "react-native";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import { Picker } from "@react-native-picker/picker";
import { styles } from "./SettingStyles";

type Task = {
  id: number;
  title: string;
  category: string;
  type: "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" | "‡∏ô‡∏≤‡∏ó‡∏µ";
  duration: number;
  date: Date;
  priority: number;
  deadline?: Date;
};

const categoryColors: Record<string, string> = {
  "‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô": "#ef4444",
  "‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á": "#3b82f6",
  "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô": "#10b981",
  "Event": "#f59e0b",
  "Personal": "#8b5cf6",
};

export default function SettingsScreen() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [title, setTitle] = useState("");
  const [category, setCategory] = useState("‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô");
  const [duration, setDuration] = useState<number>(0);
  const [type, setType] = useState<"‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" | "‡∏ô‡∏≤‡∏ó‡∏µ">("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");
  const [date, setDate] = useState(new Date());
  const [deadline, setDeadline] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showDeadlinePicker, setShowDeadlinePicker] = useState(false);

  const handleAddTask = () => {
    if (!title.trim() || duration <= 0) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

    const newTask: Task = {
      id: Date.now(),
      title: title.trim(),
      category,
      duration,
      type,
      date,
      priority: category === "‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" ? 1 : category === "‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á" ? 2 : 3,
      deadline: category === "‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" ? deadline : undefined,
    };

    setTasks((prev) => [...prev, newTask].sort((a, b) => a.priority - b.priority));
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
    setTitle("");
    setDuration(0);
    setType("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");
    setCategory("‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô");
    setDate(new Date());
    setDeadline(new Date());
  };

  // ‡πÅ‡∏™‡∏î‡∏á Timeline ‡∏á‡∏≤‡∏ô
  const renderTimeline = () => {
    if (tasks.length === 0) {
      return <Text style={styles.emptyState}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤</Text>;
    }

    const grouped: Record<string, Task[]> = {};
    tasks.forEach((task) => {
      const key = task.date.toDateString();
      if (!grouped[key]) grouped[key] = [];
      grouped[key].push(task);
    });

    return Object.keys(grouped)
      .sort((a, b) => new Date(a).getTime() - new Date(b).getTime())
      .map((dateStr) => (
        <View key={dateStr} style={{ marginBottom: 20 }}>
          <Text style={styles.dateHeader}>
            {new Date(dateStr).toLocaleDateString('th-TH', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </Text>
          {grouped[dateStr].map((task) => (
            <View
              key={task.id}
              style={[styles.taskBlock, { backgroundColor: categoryColors[task.category] || "#6b7280" }]}
            >
              <Text style={styles.taskTitle}>{task.title}</Text>
              <Text style={styles.taskDetails}>
                üìÇ {task.category} ‚Ä¢ ‚è±Ô∏è {task.duration} {task.type}
                {task.deadline && ` ‚Ä¢ üìÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô: ${task.deadline.toLocaleDateString('th-TH')}`}
              </Text>
            </View>
          ))}
        </View>
      ));
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <Text style={styles.heading}>‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</Text>

      <View style={styles.formBlock}>
        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */}
        <Text style={styles.label}>üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</Text>
        <TextInput
          style={styles.input}
          placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥..."
          placeholderTextColor="#9ca3af"
          value={title}
          onChangeText={setTitle}
        />

        {/* ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
        <Text style={styles.label}>üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏á‡∏≤‡∏ô</Text>
        <View style={styles.pickerContainer}>
          <Picker
            selectedValue={category}
            onValueChange={(item) => setCategory(item)}
            style={{ height: 50, color: "#1f2937" }}
          >
            <Picker.Item label="üî• ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" value="‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" />
            <Picker.Item label="üìã ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á" value="‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á" />
            <Picker.Item label="üòå ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" value="‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" />
            <Picker.Item label="üéâ Event" value="Event" />
            <Picker.Item label="üë§ Personal" value="Personal" />
          </Picker>
        </View>

        {/* ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
        <Text style={styles.label}>‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</Text>
        <View style={styles.row}>
          <TextInput
            style={styles.durationInput}
            placeholder="0"
            placeholderTextColor="#9ca3af"
            keyboardType="numeric"
            value={duration > 0 ? duration.toString() : ""}
            onChangeText={(text) => setDuration(Number(text) || 0)}
          />
          <View style={styles.durationPickerContainer}>
            <Picker 
              selectedValue={type} 
              onValueChange={(item) => setType(item)} 
              style={{ height: 50, color: "#1f2937" }}
            >
              <Picker.Item label="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" value="‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" />
              <Picker.Item label="‡∏ô‡∏≤‡∏ó‡∏µ" value="‡∏ô‡∏≤‡∏ó‡∏µ" />
            </Picker>
          </View>
        </View>

        {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
        <Text style={styles.label}>üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥</Text>
        <TouchableOpacity 
          style={styles.dateButton}
          onPress={() => setShowDatePicker(true)}
        >
          <Text style={styles.dateButtonText}>
            üìÖ {date.toLocaleDateString('th-TH', {
              weekday: 'short',
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            })}
          </Text>
        </TouchableOpacity>

        {/* Deadline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô */}
        {category === "‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" && (
          <>
            <Text style={styles.label}>‚ö†Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô</Text>
            <TouchableOpacity 
              style={styles.deadlineButton}
              onPress={() => setShowDeadlinePicker(true)}
            >
              <Text style={styles.deadlineButtonText}>
                ‚è∞ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô: {deadline.toLocaleDateString('th-TH', {
                  weekday: 'short',
                  month: 'short',
                  day: 'numeric'
                })}
              </Text>
            </TouchableOpacity>
          </>
        )}

        {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô */}
        <TouchableOpacity 
          style={styles.addButton}
          onPress={handleAddTask}
          disabled={!title.trim() || duration <= 0}
        >
          <Text style={styles.addButtonText}>
            ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
          </Text>
        </TouchableOpacity>
      </View>

      {/* Timeline Section */}
      <Text style={styles.heading}>üìã Timeline ‡∏á‡∏≤‡∏ô</Text>
      <View style={styles.timelineBlock}>
        {renderTimeline()}
      </View>

      {/* Date Time Pickers */}
      <DateTimePickerModal
        isVisible={showDatePicker}
        mode="date"
        onConfirm={(selectedDate) => {
          setDate(selectedDate);
          setShowDatePicker(false);
        }}
        onCancel={() => setShowDatePicker(false)}
        date={date}
      />

      <DateTimePickerModal
        isVisible={showDeadlinePicker}
        mode="date"
        onConfirm={(selectedDate) => {
          setDeadline(selectedDate);
          setShowDeadlinePicker(false);
        }}
        onCancel={() => setShowDeadlinePicker(false)}
        date={deadline}
        minimumDate={new Date()}
      />
    </ScrollView>
  );
}